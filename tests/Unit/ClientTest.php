<?php
namespace LarsNieuwenhuizen\Trustpilot\Tests\Unit;

use LarsNieuwenhuizen\Trustpilot\Client;
use LarsNieuwenhuizen\Trustpilot\Configuration;
use LarsNieuwenhuizen\Trustpilot\Service\BusinessUnitDataService;
use LarsNieuwenhuizen\Trustpilot\Service\CategoryDataService;
use LarsNieuwenhuizen\Trustpilot\Service\ConsumerDataService;
use PHPUnit\Framework\TestCase;

class ClientTest extends TestCase
{

    /**
     * @var Client
     */
    protected $subject;

    /**
     * Test setup
     */
    public function setUp()
    {
        $configurationMock = $this->getMockBuilder(Configuration::class)->getMock();
        $this->subject = new Client($configurationMock);

        parent::setUp(); // TODO: Change the autogenerated stub
    }

    /**
     * @test
     */
    public function getConfigurationReturnsTheConfigurationObject()
    {
        $this->assertInstanceOf(Configuration::class, $this->subject->getConfiguration());
    }

    /**
     * @test
     */
    public function allDataServicesAreSet()
    {
        $this->assertInstanceOf(BusinessUnitDataService::class, $this->subject->businessDataService);
        $this->assertInstanceOf(CategoryDataService::class, $this->subject->categoryDataService);
        $this->assertInstanceOf(ConsumerDataService::class, $this->subject->consumerDataService);
    }

    /**
     * @test
     */
    public function setConfigurationOverridesTheDefaultConstructedConfiguration()
    {
        $baseConfiguration = $this->subject->getConfiguration();
        $newConfiguration = new Configuration();
        $newConfiguration->setAllowRedirects(true);

        $this->subject->setConfiguration($newConfiguration);
        $this->assertEquals(false, $baseConfiguration->isAllowRedirects());
        $this->assertEquals($newConfiguration, $this->subject->getConfiguration());
        $this->assertEquals(true, $this->subject->getConfiguration()->isAllowRedirects());
    }

    /**
     * @test
     */
    public function httpClientReturnsGuzzleHttpClient()
    {
        $this->assertInstanceOf(\GuzzleHttp\Client::class, $this->subject->getHttpClient());
    }

    /**
     * @test
     */
    public function orderByOverridesTheDefaultSortOrder()
    {
        $configuration = new Configuration();
        $this->subject->setConfiguration($configuration);

        $this->subject->orderBy('updatedat.asc');
        $this->assertEquals('updatedat.asc', $this->subject->getConfiguration()->getDefaultOrderBy());
    }

    /**
     * @test
     */
    public function perPageOverridesTheDefaultResultsPerPage()
    {
        $configuration = new Configuration();
        $this->subject->setConfiguration($configuration);

        $this->subject->perPage(1251);
        $this->assertEquals(1251, $this->subject->getConfiguration()->getDefaultResultsPerPage());
    }
}